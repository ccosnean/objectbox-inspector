// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/category.dart';
import 'models/comment.dart';
import 'models/post.dart';
import 'models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 9204389335100116947),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(8, 588666454146585678),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6607034592255374534),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 2065247353024696940)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4829630488897594594),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6381161645811918549),
            name: 'iconName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8889435216445471141),
            name: 'dbId',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 3282429361953021308),
      name: 'Comment',
      lastPropertyId: const obx_int.IdUid(5, 4273663842260461558),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8127382335773425290),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 929877451502931493),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 496454568528374151),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7165556088328118335),
            name: 'authorId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8919893336729362881),
            relationTarget: 'User'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4273663842260461558),
            name: 'postId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 466901588780305719),
            relationTarget: 'Post')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4280791827933621311),
      name: 'Post',
      lastPropertyId: const obx_int.IdUid(6, 2258164995607469926),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7446985561105612531),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1494765124165801189),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8110165006178309588),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6909237268806958605),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4357391179156416579),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2258164995607469926),
            name: 'authorId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 4729505839616281589),
            relationTarget: 'User')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'comments', srcEntity: 'Comment', srcField: 'post')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2087573786649227116),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(3, 2767074081521858293),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3120400413824991904),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5297253976437047871),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 2293397364878150452)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2767074081521858293),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 2087573786649227116),
      lastIndexId: const obx_int.IdUid(5, 2293397364878150452),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        850449383254443506,
        7493509711066537935,
        5319693412517815094,
        588666454146585678
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[0],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.dbId,
        setId: (Category object, int id) {
          object.dbId = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final iconNameOffset = object.iconName == null
              ? null
              : fbb.writeString(object.iconName!);
          fbb.startTable(9);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, iconNameOffset);
          fbb.addInt64(6, object.dbId);
          fbb.finish(fbb.endTable());
          return object.dbId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final iconNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Category(
              name: nameParam,
              description: descriptionParam,
              iconName: iconNameParam)
            ..dbId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);

          return object;
        }),
    Comment: obx_int.EntityDefinition<Comment>(
        model: _entities[1],
        toOneRelations: (Comment object) => [object.author, object.post],
        toManyRelations: (Comment object) => {},
        getId: (Comment object) => object.id,
        setId: (Comment object, int id) {
          object.id = id;
        },
        objectToFB: (Comment object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addInt64(2, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(3, object.author.targetId);
          fbb.addInt64(4, object.post.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Comment(content: contentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..createdAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.author.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.author.attach(store);
          object.post.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.post.attach(store);
          return object;
        }),
    Post: obx_int.EntityDefinition<Post>(
        model: _entities[2],
        toOneRelations: (Post object) => [object.author],
        toManyRelations: (Post object) => {
              obx_int.RelInfo<Comment>.toOneBacklink(
                      5, object.id, (Comment srcObject) => srcObject.post):
                  object.comments
            },
        getId: (Post object) => object.id,
        setId: (Post object, int id) {
          object.id = id;
        },
        objectToFB: (Post object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedAt?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.author.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final updatedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Post(title: titleParam, content: contentParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..createdAt = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..updatedAt = updatedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(updatedAtValue);
          object.author.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.author.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Post>(
              object.comments,
              store,
              obx_int.RelInfo<Comment>.toOneBacklink(
                  5, object.id, (Comment srcObject) => srcObject.post));
          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[3],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = User(email: emailParam, name: nameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[0].properties[0]);

  /// See [Category.description].
  static final description =
      obx.QueryStringProperty<Category>(_entities[0].properties[1]);

  /// See [Category.iconName].
  static final iconName =
      obx.QueryStringProperty<Category>(_entities[0].properties[2]);

  /// See [Category.dbId].
  static final dbId =
      obx.QueryIntegerProperty<Category>(_entities[0].properties[3]);
}

/// [Comment] entity fields to define ObjectBox queries.
class Comment_ {
  /// See [Comment.id].
  static final id =
      obx.QueryIntegerProperty<Comment>(_entities[1].properties[0]);

  /// See [Comment.content].
  static final content =
      obx.QueryStringProperty<Comment>(_entities[1].properties[1]);

  /// See [Comment.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Comment>(_entities[1].properties[2]);

  /// See [Comment.author].
  static final author =
      obx.QueryRelationToOne<Comment, User>(_entities[1].properties[3]);

  /// See [Comment.post].
  static final post =
      obx.QueryRelationToOne<Comment, Post>(_entities[1].properties[4]);
}

/// [Post] entity fields to define ObjectBox queries.
class Post_ {
  /// See [Post.id].
  static final id = obx.QueryIntegerProperty<Post>(_entities[2].properties[0]);

  /// See [Post.title].
  static final title =
      obx.QueryStringProperty<Post>(_entities[2].properties[1]);

  /// See [Post.content].
  static final content =
      obx.QueryStringProperty<Post>(_entities[2].properties[2]);

  /// See [Post.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Post>(_entities[2].properties[3]);

  /// See [Post.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Post>(_entities[2].properties[4]);

  /// See [Post.author].
  static final author =
      obx.QueryRelationToOne<Post, User>(_entities[2].properties[5]);

  /// see [Post.comments]
  static final comments = obx.QueryBacklinkToMany<Comment, Post>(Comment_.post);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[3].properties[0]);

  /// See [User.email].
  static final email =
      obx.QueryStringProperty<User>(_entities[3].properties[1]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[3].properties[2]);
}
